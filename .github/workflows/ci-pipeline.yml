# Nombre del flujo de trabajo que aparecerá en la pestaña "Actions" de GitHub
name: Build, Test and Quality Gate

# Define cuándo se debe ejecutar este flujo de trabajo
on:
  # Se ejecuta cuando se crea o actualiza un Pull Request hacia main o develop
  pull_request:
    branches: [ main, develop ]
  # Se ejecuta cuando se hace un push (ej. una fusión) a main o develop
  push:
    branches: [ main, develop ]

jobs:
  # --- Job 1: El Filtro Rápido (Para Pull Requests y Pushes) ---
  build_and_test:
    name: Build and Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      # 1. Clona el código del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configura el entorno de Java 17 y activa el caché de Gradle para mayor velocidad
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 3. Da permisos de ejecución al script de Gradle (necesario en entornos Linux)
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Ejecuta el build estándar (compila, ejecuta tests unitarios y de integración)
      - name: Build with Gradle
        run: ./gradlew build

  # --- Job 2: El Filtro Profundo (Solo para Pushes a la rama principal) ---
  quality_gate:
    name: Run Deep Quality Analysis
    # Condición: Solo se ejecuta si el evento es un 'push' (no en PRs)
    if: github.event_name == 'push'
    # Dependencia: Solo se ejecuta si el job 'build_and_test' fue exitoso
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Ejecuta las tareas lentas de análisis de calidad
      - name: Run Mutation and Coverage Analysis
        run: ./gradlew pitest jacocoTestReport

      # 6. (Opcional pero recomendado) Sube los reportes como artefactos para poder revisarlos
      - name: Upload Pitest Report
        uses: actions/upload-artifact@v3
        with:
          name: pitest-report
          path: '**/build/reports/pitest'

      - name: Upload JaCoCo Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: '**/build/reports/jacocoHtml'