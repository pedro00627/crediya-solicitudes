server:
  port: 8081
spring:
  application:
    name: "Solicitudes"
  devtools:
    add-properties: false
  h2:
    console:
      enabled: true
      path: "/h2"
  profiles:
    include: null
management:
  endpoints:
    web:
      exposure:
        include: "health,prometheus"
  endpoint:
    health:
      probes:
        enabled: true
  health:
    circuitbreakers:
      enabled: true
cors:
  allowed-origins: "http://localhost:4200,http://localhost:8080"
adapters:
  r2dbc:
    host: "localhost"
    port: 5432
    database: "crediya"
    schema: "solicitudes"
    username: "postgres"
    password: "P1o2s3G4."
  restconsumer:
    url: "http://localhost:8080/api/v1/usuarios"
logging:
  level:
    root: "WARN"
    co.com.pragma: "INFO"
    org.springframework.web: "WARN"
    io.r2dbc: "WARN"
    org.springframework.cache: DEBUG # <-- Añadido para ver logs de caché
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%15.15t] [%X{correlationId}] %-40.40logger{39} : %m%n"
adapter:
  user-api:
    timeout: 5000
    url: "http://localhost:8080"
resilience4j:
  circuitbreaker:
    instances:
      testGet:
        registerHealthIndicator: true
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: "2s"
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        minimumNumberOfCalls: 10
        waitDurationInOpenState: "10s"
      testPost:
        registerHealthIndicator: true
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: "2s"
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        minimumNumberOfCalls: 10
        waitDurationInOpenState: "10s"

# Propiedades de negocio externalizadas
app:
  rules:
    clientRoleId: 2
    pendingStatusId: 1
